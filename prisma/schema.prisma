generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Member {
  id                 Int                  @id @default(autoincrement())
  name               String
  email              String               @unique
  birthDate          DateTime
  username           String               @unique
  cpf                String?
  rg                 String?
  passport           String?
  phone              String
  lsdEmail           String?
  secondaryEmail     String?
  memberType         MemberType
  lattes             String?
  roomName           String?
  hasKey             Boolean?             @default(false)
  isActive           Boolean?             @default(false)
  isBrazilian        Boolean?             @default(true)
  services           String[]
  projectAssociation ProjectAssociation[]
  registrationStatus RegistrationStatus?  @relation("RegistrationStatus")

  @@map("members")
}

model RegistrationStatus {
  id         Int        @id @default(autoincrement())
  status     StatusType
  comment    String?
  createdBy  String
  memberId   Int        @unique
  reviewedBy String?
  member     Member     @relation("RegistrationStatus", fields: [memberId], references: [id])

  @@unique([id, memberId])
}

model Project {
  id                 Int                  @id @default(autoincrement())
  name               String
  creationDate       DateTime
  endDate            DateTime?
  building           String?
  room               String?
  financier          String?
  isActive           Boolean              @default(true)
  embrapiiCode       String?
  projectAssociation ProjectAssociation[]
}

model ProjectAssociation {
  projectId Int
  startDate DateTime
  endDate   DateTime?
  id        Int       @id @default(autoincrement())
  memberId  Int
  isActive  Boolean   @default(true)
  member    Member    @relation(fields: [memberId], references: [id])
  project   Project   @relation(fields: [projectId], references: [id])

  @@unique([projectId, memberId])
}

model ActivityRecord {
  id        Int           @id @default(autoincrement())
  operation OperationType
  idEntity  Int
  user      String
  date      DateTime
  newValue  Json
  oldValue  Json?
  entity    EntityType
}

enum StatusType {
  PENDING
  APPROVED
  REJECTED
}

enum MemberType {
  STUDENT
  SUPPORT
  PROFESSOR
  EXTERNAL
}

enum OperationType {
  CREATE
  UPDATE
}

enum EntityType {
  PROJECT
  MEMBER
  PROJECT_ASSOCIATION
}
