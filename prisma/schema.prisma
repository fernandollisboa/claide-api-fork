// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Member {
  id                 Int                  @id @default(autoincrement())
  name               String
  email              String               @unique
  birthDate          DateTime
  username           String               @unique
  cpf                String?
  rg                 String?
  passport           String?
  phone              String
  lsdEmail           String?
  secondaryEmail     String?
  memberType         MemberType
  lattes             String?
  roomName           String?
  hasKey             Boolean?             @default(false)
  isActive           Boolean?             @default(false)
  isBrazilian        Boolean?             @default(true)

  registrationStatus RegistrationStatus?
  ProjectAssociation ProjectAssociation[]
  services           String[]


  @@map("members")
}

model RegistrationStatus {
  id        Int       @id @default(autoincrement())
  status    StatusType
  comment   String?
  createdBy String
  member Member @relation(fields: [memberId], references: [id])
  memberId Int @unique
  reviewedBy String?

  @@unique([id, memberId])
}

enum StatusType{
  PENDING
  APPROVED
  REJECTED
}

enum MemberType {
  STUDENT
  SUPPORT
  PROFESSOR
  EXTERNAL
}

model Project {
  id            Int       @id @default(autoincrement())
  name          String
  creationDate  DateTime
  endDate       DateTime?
  building      String?
  room          String?
  embrapiiCode String?
  financier     String?
  isActive      Boolean   @default(true)

  projectAssociation ProjectAssociation[]
}

model ProjectAssociation {
  id        Int       @id @default(autoincrement())
  project   Project   @relation(fields: [projectId], references: [id])
  member    Member    @relation(fields: [memberId], references: [id])
  projectId Int
  memberId  Int
  startDate DateTime
  endDate   DateTime?
  isActive  Boolean   @default(true)

  @@unique([projectId, memberId])
}

model ActivityRecord {
  id        Int           @id @default(autoincrement())
  operation OperationType
  entity EntityType
  newValue Json
  oldValue Json?
  idEntity Int
  user String  
  date DateTime
}

enum OperationType {
  CREATE
  UPDATE
}

enum EntityType{
  PROJECT
  MEMBER
  PROJECT_ASSOCIATION
}
